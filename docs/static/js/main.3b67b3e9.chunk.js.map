{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized","title","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","propTypes","PropTypes","func","isRequired","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OAEO,sBAAMC,SAZQ,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAOf,SACC,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,gDCPhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yGAGXC,EAHW,iDAGmCC,UAAUH,GAH7C,0EAKMI,MAAMF,GALZ,cAKXG,EALW,gBAMMA,EAASC,OANf,uBAMTC,EANS,EAMTA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,UAAUX,IAC3BY,MAAOJ,EAAII,UAZF,kBAiBXN,GAjBW,2HAAH,sDCETO,G,KAAc,SAAC,GAAiB,IAAhBD,EAAe,EAAfA,MAAMZ,EAAS,EAATA,IAG/B,OACI,sBAAKc,UAAU,sBAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMJ,IACvB,4BAAIA,SCJDK,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAExB,ECJyB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAOnB,CAACpB,IAGIqB,EDpB0BK,CAAc1B,GAAlCY,EAAd,EAAQL,KAAca,EAAtB,EAAsBA,QAIvB,OACM,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,iBAAb,qBAGZ,qBAAKA,UAAU,oCAAf,SAEQJ,EAAOH,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aESjC3B,EAAY2C,UAAY,CACpB1C,cAAe2C,IAAUC,KAAKC,YAGnBC,MA/BM,WAEjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAKA,OACI,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEK+C,EAAWvB,KAAI,SAAAT,GAAQ,OACjB,cAAC,EAAD,CACQA,SAAUA,GACLA,Y,MClBjCiC,IAASC,OAEL,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3b67b3e9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    // el valor del input del e.target.value se lo pasas los valores al setInputValue\r\n    const handleInputChange = (e) =>{        \r\n        setInputValue(e.target.value);        \r\n    }\r\n\r\n   \r\n    // La funcion escucha submit y le asigna a las categories con el setCategories por las props\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories((cats) => [inputValue, ...cats ]); // \r\n            setInputValue(''); //Limpias el input\r\n        }        \r\n        \r\n    }\r\n\r\n    return (\r\n      \r\n           <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n           </form>\r\n            \r\n        \r\n    )\r\n}\r\n","\r\n\r\n  export const getGifs = async( category ) => {\r\n    try {\r\n        const apiKey=`Q6c2YHs29rLQYBLCo6A8rdpNGPtcO04L`\r\n        const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=12&api_key=${apiKey}`;\r\n\r\n        const response = await fetch(url);\r\n        const { data } = await response.json();\r\n\r\n        const gifs = data.map( img  => {\r\n            return {\r\n                id: img.id,\r\n                url: img.images?.downsized.url,\r\n                title: img.title                    \r\n            }\r\n            \r\n        })\r\n\r\n       return gifs;\r\n        \r\n\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import React from 'react';\r\nimport \"animate.css\";\r\n\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    \r\n    return (\r\n        <div className=\"card animate__jello\">\r\n          <img src={ url } alt={ title }/>\r\n          <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGrid'\r\nimport {GifGridItem} from './GifGridItem';\r\nimport \"animate.css\";\r\n// import SpinnerLoading from './SpinnerLoading';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n   const { data: images, loading } = useFetchGifs( category );\r\n\r\n   \r\n\r\n  return (\r\n        <>\r\n        <h3>{category}</h3> \r\n\r\n        {loading && <p className=\"animate__flash\">Loading</p>}       \r\n       \r\n\r\n        <div className=\"cardContainer animate__backInDown\">            \r\n            {   \r\n                images.map( img => \r\n                    <GifGridItem \r\n                        key={img.id} \r\n                        {...img}\r\n                    /> \r\n                )\r\n            }            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( category )=> {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () =>{\r\n\r\n        getGifs( category )\r\n            .then( imgs=>{               \r\n                    \r\n              setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n                    \r\n          \r\n                \r\n            })\r\n\r\n    },[category])\r\n\r\n\r\n    return state; // [ data:[], loading: true]\r\n} ","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport PropTypes from 'prop-types'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n       \r\n  \r\n\r\n    return (\r\n        <>\r\n         <h2>GifExpertApp</h2>  \r\n         <AddCategory setCategories={setCategories}/>\r\n         <hr/>\r\n       \r\n        \r\n         <ol>\r\n            {\r\n              categories.map(category => \r\n                    <GifGrid \r\n                            category={category} \r\n                            key={category}\r\n                    /> )\r\n            }           \r\n         </ol>     \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />, document.getElementById('root')\n);\n\n\n\n// GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr/>"],"sourceRoot":""}